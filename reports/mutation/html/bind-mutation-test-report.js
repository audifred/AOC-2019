document.querySelector('mutation-test-report-app').report = {"files":{"/Users/luis/sparkbox/AOC-2019/day01/index.js":{"language":"javascript","mutants":[{"id":"0","location":{"end":{"column":46,"line":1},"start":{"column":39,"line":1}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"1","location":{"end":{"column":52,"line":2},"start":{"column":41,"line":2}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"3","location":{"end":{"column":28,"line":4},"start":{"column":22,"line":4}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"2","location":{"end":{"column":24,"line":3},"start":{"column":20,"line":3}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"4","location":{"end":{"column":69,"line":6},"start":{"column":59,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"6","location":{"end":{"column":60,"line":8},"start":{"column":34,"line":8}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"5","location":{"end":{"column":78,"line":6},"start":{"column":72,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"Survived"},{"id":"7","location":{"end":{"column":60,"line":8},"start":{"column":39,"line":8}},"mutatorName":"ArithmeticOperator","replacement":"Math.floor(m / 3) + 2","status":"Killed"},{"id":"8","location":{"end":{"column":55,"line":8},"start":{"column":50,"line":8}},"mutatorName":"ArithmeticOperator","replacement":"m * 3","status":"Killed"},{"id":"9","location":{"end":{"column":76,"line":10},"start":{"column":18,"line":10}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"11","location":{"end":{"column":68,"line":13},"start":{"column":23,"line":12}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"10","location":{"end":{"column":75,"line":10},"start":{"column":37,"line":10}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"12","location":{"end":{"column":55,"line":13},"start":{"column":10,"line":13}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"13","location":{"end":{"column":55,"line":13},"start":{"column":35,"line":13}},"mutatorName":"ArithmeticOperator","replacement":"total - currentValue","status":"Killed"},{"id":"15","location":{"end":{"column":17,"line":22},"start":{"column":3,"line":22}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"14","location":{"end":{"column":8,"line":27},"start":{"column":28,"line":21}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"16","location":{"end":{"column":17,"line":22},"start":{"column":3,"line":22}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"17","location":{"end":{"column":17,"line":22},"start":{"column":3,"line":22}},"mutatorName":"EqualityOperator","replacement":"totalFuel < 0","status":"Survived"},{"id":"19","location":{"end":{"column":32,"line":26},"start":{"column":9,"line":26}},"mutatorName":"ArithmeticOperator","replacement":"totalFuel - accumulator","status":"Killed"},{"id":"18","location":{"end":{"column":17,"line":22},"start":{"column":3,"line":22}},"mutatorName":"EqualityOperator","replacement":"totalFuel > 0","status":"Killed"},{"id":"20","location":{"end":{"column":4,"line":35},"start":{"column":17,"line":29}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"21","location":{"end":{"column":68,"line":32},"start":{"column":5,"line":31}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"22","location":{"end":{"column":2,"line":40},"start":{"column":18,"line":37}},"mutatorName":"ObjectLiteral","replacement":"{}","status":"Killed"}],"source":"const { pipe, reduce, add } = require('ramda');\nconst { convertInputToArray } = require('./toArray');\nconst fs = require('fs');\nconst path = require('path');\n\nconst inputData = fs.readFileSync(path.resolve(__dirname, 'data.txt'), 'utf8');\n\nconst getFuelRequirementByMass = m => Math.floor(m / 3) - 2;\n\nconst getFuel1 = array => array.map(item => getFuelRequirementByMass(item));\n\nconst reduceFuelArr = fuelArr =>\n  reduce((total, currentValue) => total + currentValue, 0, fuelArr);\n\nconst getFuelForMass = pipe(convertInputToArray, getFuel1, reduceFuelArr);\n\n//-------------------------------------------------------------------\n// PART TWO\n//-------------------------------------------------------------------\n\nconst getFuelRecursively = (totalFuel, accumulator = 0) =>\n  totalFuel <= 0\n    ? accumulator\n    : getFuelRecursively(\n        getFuelRequirementByMass(totalFuel),\n        totalFuel + accumulator\n      );\n\nconst getFuel = input =>\n  reduce(\n    (acc, value) =>\n      add(acc, getFuelRecursively(getFuelRequirementByMass(value))),\n    0,\n    convertInputToArray(input)\n  );\n\nmodule.exports = {\n  getFuelForMass,\n  getFuel\n};\n"},"/Users/luis/sparkbox/AOC-2019/day01/toArray.js":{"language":"javascript","mutants":[{"id":"23","location":{"end":{"column":37,"line":5},"start":{"column":31,"line":1}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"24","location":{"end":{"column":36,"line":5},"start":{"column":10,"line":5}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"}],"source":"exports.convertInputToArray = input =>\n  input\n    .toString()\n    .split(/\\n|\\$/)\n    .map(item => parseInt(item, 10));\n"},"/Users/luis/sparkbox/AOC-2019/day04/doublePasswordFinder1.js":{"language":"javascript","mutants":[{"id":"25","location":{"end":{"column":58,"line":1},"start":{"column":35,"line":1}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"26","location":{"end":{"column":60,"line":2},"start":{"column":36,"line":2}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"27","location":{"end":{"column":64,"line":3},"start":{"column":38,"line":3}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"28","location":{"end":{"column":41,"line":4},"start":{"column":34,"line":4}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"30","location":{"end":{"column":17,"line":9},"start":{"column":3,"line":9}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"29","location":{"end":{"column":2,"line":14},"start":{"column":35,"line":6}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"31","location":{"end":{"column":4,"line":11},"start":{"column":34,"line":9}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"32","location":{"end":{"column":54,"line":10},"start":{"column":37,"line":10}},"mutatorName":"ArithmeticOperator","replacement":"counter[item] - 1","status":"Killed"},{"id":"33","location":{"end":{"column":2,"line":20},"start":{"column":35,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"34","location":{"end":{"column":77,"line":19},"start":{"column":10,"line":19}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"35","location":{"end":{"column":77,"line":19},"start":{"column":10,"line":19}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"36","location":{"end":{"column":77,"line":19},"start":{"column":10,"line":19}},"mutatorName":"EqualityOperator","replacement":"Object.keys(counter).filter(key => counter[key] === 2).length === 0","status":"Killed"},{"id":"38","location":{"end":{"column":63,"line":19},"start":{"column":45,"line":19}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"39","location":{"end":{"column":63,"line":19},"start":{"column":45,"line":19}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"37","location":{"end":{"column":63,"line":19},"start":{"column":38,"line":19}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"40","location":{"end":{"column":63,"line":19},"start":{"column":45,"line":19}},"mutatorName":"EqualityOperator","replacement":"counter[key] !== 2","status":"Killed"},{"id":"41","location":{"end":{"column":16,"line":27},"start":{"column":31,"line":22}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"}],"source":"const { generateArray } = require('./utils/generateArray');\nconst { toStringsArray } = require('./utils/toStringsArray');\nconst { conditionChecker } = require('./utils/conditionChecker');\nconst { pipe, filter } = require('ramda');\n\nconst digitCounter = numString => {\n  const counter = new Set();\n\n  [...numString].forEach(item => {\n    counter[item] = counter[item] ? counter[item] + 1 : 1;\n  });\n\n  return counter;\n};\n\nconst isGroupOfTwo = numString => {\n  const counter = digitCounter(numString);\n\n  return Object.keys(counter).filter(key => counter[key] === 2).length !== 0;\n};\n\nconst doublePasswordFinder1 = (start, end) =>\n  pipe(\n    generateArray,\n    toStringsArray,\n    filter(conditionChecker(isGroupOfTwo))\n  )(start, end);\n\nmodule.exports = doublePasswordFinder1;\n"},"/Users/luis/sparkbox/AOC-2019/day04/doublePasswordFinder2.js":{"language":"javascript","mutants":[{"id":"42","location":{"end":{"column":43,"line":1},"start":{"column":28,"line":1}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"43","location":{"end":{"column":43,"line":1},"start":{"column":38,"line":1}},"mutatorName":"ArithmeticOperator","replacement":"a + b","status":"Killed"},{"id":"44","location":{"end":{"column":65,"line":5},"start":{"column":24,"line":3}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"45","location":{"end":{"column":65,"line":5},"start":{"column":3,"line":4}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"46","location":{"end":{"column":65,"line":5},"start":{"column":3,"line":4}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"48","location":{"end":{"column":25,"line":4},"start":{"column":3,"line":4}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"47","location":{"end":{"column":65,"line":5},"start":{"column":3,"line":4}},"mutatorName":"LogicalOperator","replacement":"numString.length === 6 || numString === [...numString].sort(sortByNumericValue).join('')","status":"Killed"},{"id":"49","location":{"end":{"column":25,"line":4},"start":{"column":3,"line":4}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"50","location":{"end":{"column":25,"line":4},"start":{"column":3,"line":4}},"mutatorName":"EqualityOperator","replacement":"numString.length !== 6","status":"Killed"},{"id":"51","location":{"end":{"column":65,"line":5},"start":{"column":3,"line":5}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"52","location":{"end":{"column":65,"line":5},"start":{"column":3,"line":5}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"53","location":{"end":{"column":65,"line":5},"start":{"column":3,"line":5}},"mutatorName":"EqualityOperator","replacement":"numString !== [...numString].sort(sortByNumericValue).join('')","status":"Killed"},{"id":"54","location":{"end":{"column":31,"line":5},"start":{"column":17,"line":5}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"55","location":{"end":{"column":64,"line":5},"start":{"column":62,"line":5}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"56","location":{"end":{"column":2,"line":25},"start":{"column":47,"line":7}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"57","location":{"end":{"column":20,"line":8},"start":{"column":18,"line":8}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Killed"},{"id":"59","location":{"end":{"column":31,"line":10},"start":{"column":23,"line":10}},"mutatorName":"EqualityOperator","replacement":"i < end","status":"Survived"},{"id":"58","location":{"end":{"column":31,"line":10},"start":{"column":23,"line":10}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"60","location":{"end":{"column":31,"line":10},"start":{"column":23,"line":10}},"mutatorName":"EqualityOperator","replacement":"i > end","status":"Killed"},{"id":"62","location":{"end":{"column":4,"line":23},"start":{"column":38,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"63","location":{"end":{"column":34,"line":13},"start":{"column":9,"line":13}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"64","location":{"end":{"column":34,"line":13},"start":{"column":9,"line":13}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"65","location":{"end":{"column":6,"line":22},"start":{"column":36,"line":13}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"66","location":{"end":{"column":21,"line":16},"start":{"column":7,"line":16}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"67","location":{"end":{"column":8,"line":18},"start":{"column":38,"line":16}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"68","location":{"end":{"column":52,"line":17},"start":{"column":37,"line":17}},"mutatorName":"ArithmeticOperator","replacement":"cache[item] - 1","status":"Killed"},{"id":"69","location":{"end":{"column":31,"line":21},"start":{"column":7,"line":20}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"70","location":{"end":{"column":31,"line":21},"start":{"column":7,"line":20}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"71","location":{"end":{"column":31,"line":21},"start":{"column":7,"line":20}},"mutatorName":"LogicalOperator","replacement":"Object.keys(cache).filter(key => cache[key] === 2).length !== 0 || result.push(numString)","status":"Killed"},{"id":"72","location":{"end":{"column":70,"line":20},"start":{"column":7,"line":20}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"73","location":{"end":{"column":70,"line":20},"start":{"column":7,"line":20}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"74","location":{"end":{"column":70,"line":20},"start":{"column":7,"line":20}},"mutatorName":"EqualityOperator","replacement":"Object.keys(cache).filter(key => cache[key] === 2).length === 0","status":"Killed"},{"id":"75","location":{"end":{"column":56,"line":20},"start":{"column":33,"line":20}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Killed"},{"id":"76","location":{"end":{"column":56,"line":20},"start":{"column":40,"line":20}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"77","location":{"end":{"column":56,"line":20},"start":{"column":40,"line":20}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"78","location":{"end":{"column":56,"line":20},"start":{"column":40,"line":20}},"mutatorName":"EqualityOperator","replacement":"cache[key] !== 2","status":"Killed"},{"id":"61","location":{"end":{"column":36,"line":10},"start":{"column":33,"line":10}},"mutatorName":"UpdateOperator","replacement":"i--","status":"Timeout"}],"source":"const sortByNumericValue = (a, b) => a - b;\n\nconst conditionCheck = numString =>\n  numString.length === 6 &&\n  numString === [...numString].sort(sortByNumericValue).join('');\n\nconst doublePasswordFinder2 = (start, end) => {\n  const result = [];\n\n  for (let i = start; i <= end; i++) {\n    const numString = i.toString();\n\n    if (conditionCheck(numString)) {\n      let cache = new Set();\n\n      [...numString].forEach(item => {\n        cache[item] = cache[item] ? cache[item] + 1 : 1;\n      });\n\n      Object.keys(cache).filter(key => cache[key] === 2).length !== 0 &&\n        result.push(numString);\n    }\n  }\n  return result;\n};\n\nmodule.exports = doublePasswordFinder2;\n"},"/Users/luis/sparkbox/AOC-2019/day04/duplicatesPasswordFinder1.js":{"language":"javascript","mutants":[{"id":"79","location":{"end":{"column":58,"line":1},"start":{"column":35,"line":1}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"80","location":{"end":{"column":79,"line":2},"start":{"column":45,"line":2}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"81","location":{"end":{"column":60,"line":3},"start":{"column":36,"line":3}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"82","location":{"end":{"column":64,"line":4},"start":{"column":38,"line":4}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"83","location":{"end":{"column":41,"line":6},"start":{"column":34,"line":6}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"84","location":{"end":{"column":16,"line":13},"start":{"column":35,"line":8}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"}],"source":"const { generateArray } = require('./utils/generateArray');\nconst { isConsecutiveDuplicates } = require('../utils/isConsecutiveDuplicates');\nconst { toStringsArray } = require('./utils/toStringsArray');\nconst { conditionChecker } = require('./utils/conditionChecker');\n\nconst { pipe, filter } = require('ramda');\n\nconst duplicatesPasswordFinder1 = (start, end) =>\n  pipe(\n    generateArray,\n    toStringsArray,\n    filter(conditionChecker(isConsecutiveDuplicates))\n  )(start, end);\n\nmodule.exports = duplicatesPasswordFinder1;\n"},"/Users/luis/sparkbox/AOC-2019/day04/duplicatesPasswordFinder2.js":{"language":"javascript","mutants":[{"id":"85","location":{"end":{"column":79,"line":1},"start":{"column":45,"line":1}},"mutatorName":"StringLiteral","replacement":"\"\"","status":"RuntimeError"},{"id":"86","location":{"end":{"column":29,"line":2},"start":{"column":27,"line":2}},"mutatorName":"ArrayDeclaration","replacement":"[\"Stryker was here\"]","status":"Survived"},{"id":"87","location":{"end":{"column":47,"line":7},"start":{"column":24,"line":4}},"mutatorName":"ArrowFunction","replacement":"() => undefined","status":"Survived"},{"id":"88","location":{"end":{"column":47,"line":7},"start":{"column":3,"line":5}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"89","location":{"end":{"column":47,"line":7},"start":{"column":3,"line":5}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"90","location":{"end":{"column":47,"line":7},"start":{"column":3,"line":5}},"mutatorName":"LogicalOperator","replacement":"numString.length === 6 && isConsecutiveDuplicates(numString) || numString === [...numString].sort().join('')","status":"Killed"},{"id":"91","location":{"end":{"column":37,"line":6},"start":{"column":3,"line":5}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"92","location":{"end":{"column":37,"line":6},"start":{"column":3,"line":5}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"93","location":{"end":{"column":37,"line":6},"start":{"column":3,"line":5}},"mutatorName":"LogicalOperator","replacement":"numString.length === 6 || isConsecutiveDuplicates(numString)","status":"Killed"},{"id":"94","location":{"end":{"column":25,"line":5},"start":{"column":3,"line":5}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Survived"},{"id":"95","location":{"end":{"column":25,"line":5},"start":{"column":3,"line":5}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"96","location":{"end":{"column":25,"line":5},"start":{"column":3,"line":5}},"mutatorName":"EqualityOperator","replacement":"numString.length !== 6","status":"Killed"},{"id":"97","location":{"end":{"column":47,"line":7},"start":{"column":3,"line":7}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"98","location":{"end":{"column":47,"line":7},"start":{"column":3,"line":7}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"99","location":{"end":{"column":47,"line":7},"start":{"column":3,"line":7}},"mutatorName":"EqualityOperator","replacement":"numString !== [...numString].sort().join('')","status":"Killed"},{"id":"100","location":{"end":{"column":31,"line":7},"start":{"column":17,"line":7}},"mutatorName":"ArrayDeclaration","replacement":"[]","status":"Killed"},{"id":"101","location":{"end":{"column":46,"line":7},"start":{"column":44,"line":7}},"mutatorName":"StringLiteral","replacement":"\"Stryker was here!\"","status":"Killed"},{"id":"102","location":{"end":{"column":2,"line":16},"start":{"column":51,"line":9}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"103","location":{"end":{"column":31,"line":10},"start":{"column":23,"line":10}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"104","location":{"end":{"column":31,"line":10},"start":{"column":23,"line":10}},"mutatorName":"EqualityOperator","replacement":"i < end","status":"Survived"},{"id":"105","location":{"end":{"column":31,"line":10},"start":{"column":23,"line":10}},"mutatorName":"EqualityOperator","replacement":"i > end","status":"Killed"},{"id":"107","location":{"end":{"column":4,"line":14},"start":{"column":38,"line":10}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"109","location":{"end":{"column":37,"line":11},"start":{"column":9,"line":11}},"mutatorName":"ConditionalExpression","replacement":"false","status":"Killed"},{"id":"110","location":{"end":{"column":6,"line":13},"start":{"column":39,"line":11}},"mutatorName":"BlockStatement","replacement":"{}","status":"Killed"},{"id":"108","location":{"end":{"column":37,"line":11},"start":{"column":9,"line":11}},"mutatorName":"ConditionalExpression","replacement":"true","status":"Killed"},{"id":"106","location":{"end":{"column":36,"line":10},"start":{"column":33,"line":10}},"mutatorName":"UpdateOperator","replacement":"i--","status":"Timeout"}],"source":"const { isConsecutiveDuplicates } = require('../utils/isConsecutiveDuplicates');\nconst possiblePasswords = [];\n\nconst conditionCheck = numString =>\n  numString.length === 6 &&\n  isConsecutiveDuplicates(numString) &&\n  numString === [...numString].sort().join('');\n\nconst duplicatesPasswordFinder2 = (start, end) => {\n  for (let i = start; i <= end; i++) {\n    if (conditionCheck(i.toString())) {\n      possiblePasswords.push(i.toString());\n    }\n  }\n  return possiblePasswords;\n};\n\nmodule.exports = duplicatesPasswordFinder2;\n"}},"schemaVersion":"1.0","thresholds":{"break":null,"high":80,"low":60}};